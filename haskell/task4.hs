-- Туркин Александр, задача № 4, вариант 3.
-- Написать функцию split :: [Integer] -> [[Integer]]
-- принимающую в качестве аргумента список целых чисел
-- выдающую в качестве результата список неубывающих фрагментов исходного списка

module Task4 where

import UnitTests
         
-- Функция split описана в задании
-- Аргументы: список целых чисел
-- Результат: список неубывающих фрагментов исходного списка
split :: [Integer] -> [[Integer]]
split [] = []
split list = fst result : snd result 
             where result = ( foldr split' empty_result list )  where empty_result  = ([], [])

-- Функция split' - вспомогательная
-- Аргументы: целое число, пара из двух списков: текущий список неубывающих чисел и список собранных неубывающих фрагментов исходного списка
-- Результат: пара из двух списков (из аргументов) с обновленными значениями 
split' :: Integer -> ([Integer], [[Integer]]) -> ([Integer], [[Integer]])
split' a ([], frag_lists ) = ([a], frag_lists)
split' a (cur_list, frag_lists) | a <= head cur_list = (a:cur_list, frag_lists)
                                | otherwise          = ([a], cur_list:frag_lists)

-- Тесты:
main = unitTests [
        ( split []  ,                           [] ),
        ( split [1] ,                           [ [1] ] ),
        ( split [7,7,7] ,                       [ [7,7,7] ] ),
        ( split [3, 3, 8, 6, 5, 7] ,            [ [3, 3, 8], [6], [5, 7] ] ),      
        ( split [5,0,1,2,3,6,6,5,23,56,-1] ,    [ [5],[0,1,2,3,6,6],[5,23,56],[-1] ] ),
        ( split [9,8,7,7,6,5,4,3,4,5,4,3,2,1] , [ [9],[8],[7,7],[6],[5],[4],[3,4,5],[4],[3],[2],[1] ]  ),
        ( split [2, 5, 12, 9, 10, 4, 7, 8] ,    [ [2,5,12],[9,10],[4,7,8] ] ),      
        ( split [1,2,3,4,5,0,1,2,3,4,5,6] ,     [ [1,2,3,4,5],[0,1,2,3,4,5,6] ]),          
        ( split [3,1,2,0,1,2,3,0,1,2,3,4] ,     [ [3],[1,2],[0,1,2,3],[0,1,2,3,4] ] )  ]


    
